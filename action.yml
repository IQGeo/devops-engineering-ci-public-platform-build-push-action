name: 'Build and push platform image (arm64 or amd64)'
description: 'IQGeo reusable action to build platform specialized images for a specific architecture'

inputs:
  version:
    description: 'Platform version to build (e.g., 7.4.0)'
    required: true
    type: string
  build_id:
    description: 'Unique build ID for this workflow run'
    required: true
    type: string
  platform:
    description: 'Which OS arch to build this image on (amd64, arm64)'
    required: true
    type: string
  image_type:
    description: 'Type of platform image to build (base, build, appserver, tools, devenv)'
    required: true
    type: string
  dockerfile:
    description: 'Name of the dockerfile to use (dockerfile.base, dockerfile.build, etc.)'
    required: true
    type: string
  acr:
    description: 'Azure container registry server name'
    required: true
    type: string
  registry_username:
    description: 'Azure container registry username'
    required: true
    type: string
  registry_password:
    description: 'Azure container registry password'
    required: true
    type: string
  engineering_prefix:
    description: 'Engineering prefix to place images in ACR'
    type: string
    default: devops_sandbox_engineering
  gh_token:
    description: 'GitHub token to clone utils-docker-platform repo'
    required: true
    type: string
  dev_tools_version:
    description: 'Dev tools version for devenv image build (only used for devenv)'
    type: string
    required: false

runs:
  using: "composite"
  steps:
    - name: Checkout utils-docker-platform repo
      uses: actions/checkout@v4
      with:
        repository: IQGeo/utils-docker-platform
        token: ${{ inputs.gh_token }}

    - name: Download binaries artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries
        path: platform/7x

    - name: Display downloaded artifacts
      shell: bash
      working-directory: platform/7x
      run: |
        echo "Downloaded artifacts:"
        ls -la
        echo "Checking for IQGeo-Core tar.gz files:"
        ls -la IQGeo-Core-*.tar.gz || echo "No IQGeo-Core tar.gz files found"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to ACR
      shell: bash
      run: docker login -u ${{ inputs.registry_username }} -p ${{ inputs.registry_password }} ${{ inputs.acr }}

    - name: Determine architecture tag suffix
      id: arch
      shell: bash
      run: |
        if [ "${{ inputs.platform }}" == "arm64" ]; then
          echo "suffix=arm-64" >> $GITHUB_OUTPUT
        else
          echo "suffix=amd-64" >> $GITHUB_OUTPUT
        fi

    - name: Ensure patches folder exists
      shell: bash
      working-directory: platform/7x
      run: |
        # Create patches directory structure if it doesn't exist
        # This is needed for platform versions 7.2+ which don't have patches
        # Versions 7.0 and 7.1 have patches, but 7.3, 7.4, etc. do not
        mkdir -p patches/${{ inputs.version }}
        echo "Created patches/${{ inputs.version }} directory (if it didn't exist)"

    - name: Build and push platform-base image
      if: inputs.image_type == 'base'
      shell: bash
      working-directory: platform/7x
      run: |
        docker build \
          --build-arg PLATFORM_VERSION=${{ inputs.version }} \
          --build-arg CONTAINER_REGISTRY=${{ inputs.acr }}/engineering/ \
          -f ${{ inputs.dockerfile }} \
          -t ${{ inputs.acr }}/${{ inputs.engineering_prefix }}/platform/platform-${{ inputs.image_type }}:${{ inputs.build_id }}_${{ steps.arch.outputs.suffix }} \
          .
        docker push ${{ inputs.acr }}/${{ inputs.engineering_prefix }}/platform/platform-${{ inputs.image_type }}:${{ inputs.build_id }}_${{ steps.arch.outputs.suffix }}

    - name: Build and push platform-build image
      if: inputs.image_type == 'build'
      shell: bash
      working-directory: platform/7x
      run: |
        docker build \
          --build-arg PLATFORM_VERSION=${{ inputs.version }} \
          --build-arg CONTAINER_REGISTRY=${{ inputs.acr }}/${{ inputs.engineering_prefix }}/ \
          --build-arg PLATFORM_BASE=platform/platform-base \
          -f ${{ inputs.dockerfile }} \
          -t ${{ inputs.acr }}/${{ inputs.engineering_prefix }}/platform/platform-${{ inputs.image_type }}:${{ inputs.build_id }}_${{ steps.arch.outputs.suffix }} \
          .
        docker push ${{ inputs.acr }}/${{ inputs.engineering_prefix }}/platform/platform-${{ inputs.image_type }}:${{ inputs.build_id }}_${{ steps.arch.outputs.suffix }}

    - name: Build and push platform-appserver image
      if: inputs.image_type == 'appserver'
      shell: bash
      working-directory: platform/7x
      run: |
        docker build \
          --build-arg PLATFORM_VERSION=${{ inputs.version }} \
          --build-arg CONTAINER_REGISTRY=${{ inputs.acr }}/${{ inputs.engineering_prefix }}/ \
          -f ${{ inputs.dockerfile }} \
          -t ${{ inputs.acr }}/${{ inputs.engineering_prefix }}/platform/platform-${{ inputs.image_type }}:${{ inputs.build_id }}_${{ steps.arch.outputs.suffix }} \
          .
        docker push ${{ inputs.acr }}/${{ inputs.engineering_prefix }}/platform/platform-${{ inputs.image_type }}:${{ inputs.build_id }}_${{ steps.arch.outputs.suffix }}

    - name: Build and push platform-tools image
      if: inputs.image_type == 'tools'
      shell: bash
      working-directory: platform/7x
      run: |
        docker build \
          --build-arg PLATFORM_VERSION=${{ inputs.version }} \
          --build-arg CONTAINER_REGISTRY=${{ inputs.acr }}/${{ inputs.engineering_prefix }}/ \
          -f ${{ inputs.dockerfile }} \
          -t ${{ inputs.acr }}/${{ inputs.engineering_prefix }}/platform/platform-${{ inputs.image_type }}:${{ inputs.build_id }}_${{ steps.arch.outputs.suffix }} \
          .
        docker push ${{ inputs.acr }}/${{ inputs.engineering_prefix }}/platform/platform-${{ inputs.image_type }}:${{ inputs.build_id }}_${{ steps.arch.outputs.suffix }}

    - name: Build and push platform-devenv image
      if: inputs.image_type == 'devenv'
      shell: bash
      working-directory: platform/7x
      run: |
        docker build \
          --build-arg PLATFORM_VERSION=${{ inputs.version }} \
          --build-arg DEV_TOOLS_VERSION=${{ inputs.dev_tools_version }} \
          --build-arg CONTAINER_REGISTRY=${{ inputs.acr }}/${{ inputs.engineering_prefix }}/ \
          --build-arg PLATFORM_BASE=platform/platform-base \
          -f ${{ inputs.dockerfile }} \
          -t ${{ inputs.acr }}/${{ inputs.engineering_prefix }}/platform/platform-${{ inputs.image_type }}:${{ inputs.build_id }}_${{ steps.arch.outputs.suffix }} \
          .
        docker push ${{ inputs.acr }}/${{ inputs.engineering_prefix }}/platform/platform-${{ inputs.image_type }}:${{ inputs.build_id }}_${{ steps.arch.outputs.suffix }}
